version: '3'

services:

  postgres:
    image: postgres:alpine

  rabbitmq:
    image: rabbitmq:alpine

  redis:
    image: redis:alpine

  #
  # This is a temporary container initialised just to setup the database and
  # pre-populate it with some default data.  It exits not long after it starts
  # and can be manually removed afterward.
  #
  setup:
    build: ./
    depends_on:
      - postgres
    volumes:
      - .:/app
    user: app
    entrypoint: '/bin/sh /app/docker/setup'

  #
  # The part that talks to Twitter and pulls down the data.  It's
  # multi-threaded, and I don't recommend scaling this.
  #
  collector:
    build: ./
    depends_on:
      - postgres
      - rabbitmq
      - redis
      - setup
    volumes:
      - .:/app
    user: app
    entrypoint: "/app/src/manage.py collector --verbosity ${VERBOSITY}"
    stop_grace_period: 1m
    restart: on-failure

  #
  # The webserver interface.  Unless you're making this world-facing, you
  # probably don't need to scale this.
  #
  web:
    build: ./
    depends_on:
      - postgres
      - redis
      - setup
    volumes:
      - .:/app
    ports:
      - '8000:8000'
    user: app
    entrypoint: '/bin/sh /app/docker/web'
    stop_grace_period: 1s
    restart: on-failure
