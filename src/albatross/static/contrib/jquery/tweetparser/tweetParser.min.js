/*!
 * tweetParser.js v2.1.0
 * Small Javascript Library that parse an element containing a tweet and turn URLS, @user & #hashtags into urls
 * License : MIT
 * author Vincent Loy <vincent.loy1@gmail.com>
 * http://vincent-loy.fr
 */
!function(t){"use strict";var r,e,a;e=function(t){var r,e;for(t=t||{},r=1;r<arguments.length;r+=1)if(arguments[r])for(e in arguments[r])arguments[r].hasOwnProperty(e)&&(t[e]=arguments[r][e]);return t},a=function(t,r,e){var a=document.createElement("a");return a.href=t,a.classList.add(r),a.textContent=e,a},r=function(t,r){var s=document.querySelectorAll(t),n=e({urlClass:"tweet_link",userClass:"tweet_user",hashtagClass:"hashtag",target:"_blank",searchWithHashtags:!0,parseUsers:!0,parseHashtags:!0,parseUrls:!0},r);Array.prototype.forEach.call(s,function(t){var r,e=t.innerHTML,s=/(f|ht)tps?:\/\/([^\s\t\r\n<]*[^\s\t\r\n<)*_,\.])/g,c=/\B@([a-zA-Z0-9_]+)/g,u=/\B(#[á-úÁ-Úä-üÄ-Üa-zA-Z0-9_]+)/g;r=n.searchWithHashtags?"https://twitter.com/hashtag/":"https://twitter.com/search?q=",n.parseUrls&&(e=e.replace(s,function(t){var r=a(t,n.urlClass,t);return t.replace(t,r.outerHTML)})),n.parseUsers&&(e=e.replace(c,function(t){var r=t.slice(1),e="http://twitter.com/"+r,s=a(e,n.userClass,t);return t.replace(t,s.outerHTML)})),n.parseHashtags&&(e=e.replace(u,function(t){var e=t.slice(1),s=r+e,c=a(s,n.hashtagClass,t);return t.replace(t,c.outerHTML)})),t.innerHTML=e})},t.tweetParser=r}(window);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInR3ZWV0UGFyc2VyLmpzIl0sIm5hbWVzIjpbImV4cG9ydHMiLCJ0d2VldFBhcnNlciIsImV4dGVuZCIsImdlbmVyYXRlTGluayIsIm91dCIsImkiLCJrZXkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJoYXNPd25Qcm9wZXJ0eSIsInVybCIsImNsYXNzTmFtZSIsInRleHQiLCJsaW5rIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaHJlZiIsImNsYXNzTGlzdCIsImFkZCIsInRleHRDb250ZW50IiwiZWxlbWVudCIsImFyZ3MiLCJlbHQiLCJxdWVyeVNlbGVjdG9yQWxsIiwicGFyYW1ldGVycyIsInVybENsYXNzIiwidXNlckNsYXNzIiwiaGFzaHRhZ0NsYXNzIiwidGFyZ2V0Iiwic2VhcmNoV2l0aEhhc2h0YWdzIiwicGFyc2VVc2VycyIsInBhcnNlSGFzaHRhZ3MiLCJwYXJzZVVybHMiLCJBcnJheSIsInByb3RvdHlwZSIsImZvckVhY2giLCJjYWxsIiwiZWwiLCJzZWFyY2hsaW5rIiwidHdlZXQiLCJpbm5lckhUTUwiLCJyZWdleFVybCIsInJlZ2V4VXNlciIsInJlZ2V4SGFzaHRhZyIsInJlcGxhY2UiLCJvdXRlckhUTUwiLCJ1c2VyIiwidXNlck9ubHkiLCJzbGljZSIsImhhc2h0YWciLCJoYXNodGFnT25seSIsIndpbmRvdyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztDQVdDLFNBQVVBLEdBQ1AsWUFHQSxJQUFJQyxHQUdBQyxFQUNBQyxDQUVKRCxHQUFTLFNBQVVFLEdBQ2YsR0FBSUMsR0FDQUMsQ0FJSixLQUZBRixFQUFNQSxNQUVEQyxFQUFJLEVBQUdBLEVBQUlFLFVBQVVDLE9BQVFILEdBQUssRUFDbkMsR0FBSUUsVUFBVUYsR0FDVixJQUFLQyxJQUFPQyxXQUFVRixHQUNkRSxVQUFVRixHQUFHSSxlQUFlSCxLQUM1QkYsRUFBSUUsR0FBT0MsVUFBVUYsR0FBR0MsR0FLeEMsT0FBT0YsSUFHWEQsRUFBZSxTQUFVTyxFQUFLQyxFQUFXQyxHQUNyQyxHQUFJQyxHQUFPQyxTQUFTQyxjQUFjLElBS2xDLE9BSkFGLEdBQUtHLEtBQU9OLEVBQ1pHLEVBQUtJLFVBQVVDLElBQUlQLEdBQ25CRSxFQUFLTSxZQUFjUCxFQUVaQyxHQUdYWixFQUFjLFNBQVVtQixFQUFTQyxHQUM3QixHQUFJQyxHQUFNUixTQUFTUyxpQkFBaUJILEdBQ2hDSSxFQUFhdEIsR0FDVHVCLFNBQVUsYUFDVkMsVUFBVyxhQUNYQyxhQUFjLFVBQ2RDLE9BQVEsU0FDUkMsb0JBQW9CLEVBQ3BCQyxZQUFZLEVBQ1pDLGVBQWUsRUFDZkMsV0FBVyxHQUNaWCxFQUVQWSxPQUFNQyxVQUFVQyxRQUFRQyxLQUFLZCxFQUFLLFNBQVVlLEdBRXhDLEdBQ0lDLEdBREFDLEVBQVFGLEVBQUdHLFVBS1hDLEVBQVcsb0RBQ1hDLEVBQVksc0JBQ1pDLEVBQWUsaUNBS2ZMLEdBRkFkLEVBQVdLLG1CQUVFLCtCQUdBLGdDQUliTCxFQUFXUSxZQUNYTyxFQUFRQSxFQUFNSyxRQUFRSCxFQUFVLFNBQVUvQixHQUN0QyxHQUFJRyxHQUFPVixFQUFhTyxFQUFLYyxFQUFXQyxTQUFVZixFQUVsRCxPQUFPQSxHQUFJa0MsUUFBUWxDLEVBQUtHLEVBQUtnQyxjQUtqQ3JCLEVBQVdNLGFBQ1hTLEVBQVFBLEVBQU1LLFFBQVFGLEVBQVcsU0FBVUksR0FDdkMsR0FBSUMsR0FBV0QsRUFBS0UsTUFBTSxHQUN0QnRDLEVBQU0sc0JBQXdCcUMsRUFDOUJsQyxFQUFPVixFQUFhTyxFQUFLYyxFQUFXRSxVQUFXb0IsRUFFbkQsT0FBT0EsR0FBS0YsUUFBUUUsRUFBTWpDLEVBQUtnQyxjQUtuQ3JCLEVBQVdPLGdCQUNYUSxFQUFRQSxFQUFNSyxRQUFRRCxFQUFjLFNBQVVNLEdBQzFDLEdBQUlDLEdBQWNELEVBQVFELE1BQU0sR0FDNUJ0QyxFQUFNNEIsRUFBYVksRUFDbkJyQyxFQUFPVixFQUFhTyxFQUFLYyxFQUFXRyxhQUFjc0IsRUFFdEQsT0FBT0EsR0FBUUwsUUFBUUssRUFBU3BDLEVBQUtnQyxjQUs3Q1IsRUFBR0csVUFBWUQsS0FJdkJ2QyxFQUFRQyxZQUFjQSxHQUN4QmtEIiwiZmlsZSI6InR3ZWV0UGFyc2VyLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogdHdlZXRQYXJzZXIuanMgdjIuMS4wXG4gKiBTbWFsbCBKYXZhc2NyaXB0IExpYnJhcnkgdGhhdCBwYXJzZSBhbiBlbGVtZW50IGNvbnRhaW5pbmcgYSB0d2VldCBhbmQgdHVybiBVUkxTLCBAdXNlciAmICNoYXNodGFncyBpbnRvIHVybHNcbiAqIExpY2Vuc2UgOiBNSVRcbiAqIGF1dGhvciBWaW5jZW50IExveSA8dmluY2VudC5sb3kxQGdtYWlsLmNvbT5cbiAqIGh0dHA6Ly92aW5jZW50LWxveS5mclxuICovXG5cbi8qZ2xvYmFsIHdpbmRvdywgZG9jdW1lbnQqL1xuLypqc2xpbnQgcmVnZXhwOiB0cnVlKi9cblxuKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgLy8gQ2xhc3NcbiAgICB2YXIgdHdlZXRQYXJzZXIsXG5cbiAgICAvLyBmdW5jdGlvbnNcbiAgICAgICAgZXh0ZW5kLFxuICAgICAgICBnZW5lcmF0ZUxpbms7XG5cbiAgICBleHRlbmQgPSBmdW5jdGlvbiAob3V0KSB7XG4gICAgICAgIHZhciBpLFxuICAgICAgICAgICAga2V5O1xuXG4gICAgICAgIG91dCA9IG91dCB8fCB7fTtcblxuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldKSB7XG4gICAgICAgICAgICAgICAgZm9yIChrZXkgaW4gYXJndW1lbnRzW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0uaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3V0W2tleV0gPSBhcmd1bWVudHNbaV1ba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH07XG5cbiAgICBnZW5lcmF0ZUxpbmsgPSBmdW5jdGlvbiAodXJsLCBjbGFzc05hbWUsIHRleHQpIHtcbiAgICAgICAgdmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgIGxpbmsuaHJlZiA9IHVybDtcbiAgICAgICAgbGluay5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgICAgIGxpbmsudGV4dENvbnRlbnQgPSB0ZXh0O1xuXG4gICAgICAgIHJldHVybiBsaW5rO1xuICAgIH07XG5cbiAgICB0d2VldFBhcnNlciA9IGZ1bmN0aW9uIChlbGVtZW50LCBhcmdzKSB7XG4gICAgICAgIHZhciBlbHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGVsZW1lbnQpLFxuICAgICAgICAgICAgcGFyYW1ldGVycyA9IGV4dGVuZCh7XG4gICAgICAgICAgICAgICAgdXJsQ2xhc3M6ICd0d2VldF9saW5rJyxcbiAgICAgICAgICAgICAgICB1c2VyQ2xhc3M6ICd0d2VldF91c2VyJyxcbiAgICAgICAgICAgICAgICBoYXNodGFnQ2xhc3M6ICdoYXNodGFnJyxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6ICdfYmxhbmsnLFxuICAgICAgICAgICAgICAgIHNlYXJjaFdpdGhIYXNodGFnczogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwYXJzZVVzZXJzOiB0cnVlLFxuICAgICAgICAgICAgICAgIHBhcnNlSGFzaHRhZ3M6IHRydWUsXG4gICAgICAgICAgICAgICAgcGFyc2VVcmxzOiB0cnVlXG4gICAgICAgICAgICB9LCBhcmdzKTtcblxuICAgICAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGVsdCwgZnVuY3Rpb24gKGVsKSB7XG5cbiAgICAgICAgICAgIHZhciB0d2VldCA9IGVsLmlubmVySFRNTCxcbiAgICAgICAgICAgICAgICBzZWFyY2hsaW5rLCAvL3NlYXJjaCBsaW5rIGZvciBoYXNodGFnc1xuXG5cbiAgICAgICAgICAgIC8vcmVnZXhcbiAgICAgICAgICAgICAgICByZWdleFVybCA9IC8oZnxodCl0cHM/OlxcL1xcLyhbXlxcc1xcdFxcclxcbjxdKlteXFxzXFx0XFxyXFxuPCkqXyxcXC5dKS9nLCAvL3JlZ2V4IGZvciB1cmxzXG4gICAgICAgICAgICAgICAgcmVnZXhVc2VyID0gL1xcQkAoW2EtekEtWjAtOV9dKykvZywgLy9yZWdleCBmb3IgQHVzZXJzXG4gICAgICAgICAgICAgICAgcmVnZXhIYXNodGFnID0gL1xcQigjW8OhLcO6w4Etw5rDpC3DvMOELcOcYS16QS1aMC05X10rKS9nOyAvL3JlZ2V4IGZvciAjaGFzaHRhZ3NcblxuICAgICAgICAgICAgLy9IYXNodGFnIFNlYXJjaCBsaW5rXG4gICAgICAgICAgICBpZiAocGFyYW1ldGVycy5zZWFyY2hXaXRoSGFzaHRhZ3MpIHtcbiAgICAgICAgICAgICAgICAvL3RoaXMgaXMgdGhlIHNlYXJjaCB3aXRoIGhhc2h0YWdcbiAgICAgICAgICAgICAgICBzZWFyY2hsaW5rID0gXCJodHRwczovL3R3aXR0ZXIuY29tL2hhc2h0YWcvXCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vdGhpcyBpcyBhIG1vcmUgZ2xvYmFsIHNlYXJjaCBpbmNsdWRpbmcgaGFzaHRhZ3MgYW5kIHRoZSB3b3JkIGl0c2VsZlxuICAgICAgICAgICAgICAgIHNlYXJjaGxpbmsgPSBcImh0dHBzOi8vdHdpdHRlci5jb20vc2VhcmNoP3E9XCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vdHVybiBVUkxTIGluIHRoZSB0d2VldCBpbnRvLi4uIHdvcmtpbmcgdXJsc1xuICAgICAgICAgICAgaWYgKHBhcmFtZXRlcnMucGFyc2VVcmxzKSB7XG4gICAgICAgICAgICAgICAgdHdlZXQgPSB0d2VldC5yZXBsYWNlKHJlZ2V4VXJsLCBmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsaW5rID0gZ2VuZXJhdGVMaW5rKHVybCwgcGFyYW1ldGVycy51cmxDbGFzcywgdXJsKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXJsLnJlcGxhY2UodXJsLCBsaW5rLm91dGVySFRNTCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vdHVybiBAdXNlcnMgaW4gdGhlIHR3ZWV0IGludG8uLi4gd29ya2luZyB1cmxzXG4gICAgICAgICAgICBpZiAocGFyYW1ldGVycy5wYXJzZVVzZXJzKSB7XG4gICAgICAgICAgICAgICAgdHdlZXQgPSB0d2VldC5yZXBsYWNlKHJlZ2V4VXNlciwgZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVzZXJPbmx5ID0gdXNlci5zbGljZSgxKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9ICdodHRwOi8vdHdpdHRlci5jb20vJyArIHVzZXJPbmx5LFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluayA9IGdlbmVyYXRlTGluayh1cmwsIHBhcmFtZXRlcnMudXNlckNsYXNzLCB1c2VyKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXNlci5yZXBsYWNlKHVzZXIsIGxpbmsub3V0ZXJIVE1MKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy90dXJuICNoYXNodGFncyBpbiB0aGUgdHdlZXQgaW50by4uLiB3b3JraW5nIHVybHNcbiAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJzLnBhcnNlSGFzaHRhZ3MpIHtcbiAgICAgICAgICAgICAgICB0d2VldCA9IHR3ZWV0LnJlcGxhY2UocmVnZXhIYXNodGFnLCBmdW5jdGlvbiAoaGFzaHRhZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGFzaHRhZ09ubHkgPSBoYXNodGFnLnNsaWNlKDEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gc2VhcmNobGluayArIGhhc2h0YWdPbmx5LFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluayA9IGdlbmVyYXRlTGluayh1cmwsIHBhcmFtZXRlcnMuaGFzaHRhZ0NsYXNzLCBoYXNodGFnKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGFzaHRhZy5yZXBsYWNlKGhhc2h0YWcsIGxpbmsub3V0ZXJIVE1MKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy90aGVuLCBpdCBpbmplY3QgdGhlIGxhc3QgdmFyIGludG8gdGhlIGVsZW1lbnQgY29udGFpbmluZyB0aGUgdHdlZXRcbiAgICAgICAgICAgIGVsLmlubmVySFRNTCA9IHR3ZWV0O1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgZXhwb3J0cy50d2VldFBhcnNlciA9IHR3ZWV0UGFyc2VyO1xufSh3aW5kb3cpKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==